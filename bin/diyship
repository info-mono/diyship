#!/bin/sh


# Values
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
DIYSHIP_COMMAND_LEFT="${DIYSHIP_COMMAND_LEFT:-$XDG_CONFIG_HOME/diyship/left}"
DIYSHIP_COMMAND_RIGHT="${DIYSHIP_COMMAND_RIGHT:-$XDG_CONFIG_HOME/diyship/right}"

BASH_INIT="
diyship_preexec() {
	local PREV_LAST_ARG=\$1

	if [ \"\$DIYSHIP_PREEXEC_READY\" = \"true\" ]; then
		DIYSHIP_PREEXEC_READY=false
		DIYSHIP_START_TIME=\$(date +%s%N)
	fi

	: \"\$PREV_LAST_ARG\"
}

diyship_precmd() {
	export DIYSHIP_STATUS=\$?

	DIYSHIP_PIPESTATUS=(\${PIPESTATUS[@]})
	if [[ \"\${#BP_PIPESTATUS[@]}\" -gt \"\${#DIYSHIP_PIPESTATUS[@]}\" ]]; then
		DIYSHIP_PIPESTATUS=(\${BP_PIPESTATUS[@]})
	fi
	export DIYSHIP_PIPESTATUS=\"\${DIYSHIP_PIPESTATUS[@]}\"

	DIYSHIP_JOBS=0
	for job in \$(jobs -p); do
		[[ \$job ]] && ((DIYSHIP_JOBS++))
	done
	export DIYSHIP_JOBS=\"\$DIYSHIP_JOBS\"

	\"\${diyship_precmd_user_func-:}\"

	eval \"\$_PRESERVED_PROMPT_COMMAND\"

	if [[ \$DIYSHIP_START_TIME ]]; then
		DIYSHIP_END_TIME=\$(date +%s%N)
		export DIYSHIP_DURATION=\$((DIYSHIP_END_TIME - DIYSHIP_START_TIME))
	fi

	PS1=\"\$($DIYSHIP_COMMAND_LEFT)\"

	unset DIYSHIP_START_TIME
	DIYSHIP_PREEXEC_READY=true
}

if [[ \"\${__bp_imported:-}\" == \"defined\" || \$preexec_functions || \$precmd_functions ]]; then
	diyship_preexec_all(){ diyship_preexec \"\$_\"; }
	preexec_functions+=(diyship_preexec_all)
	precmd_functions+=(diyship_precmd)
else
	dbg_trap=\"\$(trap -p DEBUG | cut -d' ' -f3 | tr -d \')\"
	if [[ -z \"\$dbg_trap\" ]]; then
		trap 'diyship_preexec \"\$_\"' DEBUG
	elif [[ \"\$dbg_trap\" != 'diyship_preexec \"\$_\"' && \"\$dbg_trap\" != 'diyship_preexec_all \"\$_\"' ]]; then
		diyship_preexec_all() {
			local PREV_LAST_ARG=\$1 ; \$dbg_trap; diyship_preexec; : \"\$PREV_LAST_ARG\";
		}
		trap 'diyship_preexec_all \"\$_\"' DEBUG
	fi

	if [[ -z \"\$PROMPT_COMMAND\" ]]; then
		PROMPT_COMMAND=\"diyship_precmd\"
	elif [[ \"\$PROMPT_COMMAND\" != *\"diyship_precmd\"* ]]; then
		_PRESERVED_PROMPT_COMMAND=\"\$PROMPT_COMMAND\"
		PROMPT_COMMAND=\"diyship_precmd\"
	fi
fi

DIYSHIP_START_TIME=\$(date +%s%N)

export DIYSHIP_SHELL=\"bash\"
"

ZSH_INIT="
zmodload zsh/parameter

if [[ \$ZSH_VERSION == ([1-4]*) ]]; then
	__diyship_get_time() {
		DIYSHIP_CAPTURED_TIME=\$(date +%s%N)
	}
else
	zmodload zsh/datetime
	zmodload zsh/mathfunc
	__diyship_get_time() {
		(( DIYSHIP_CAPTURED_TIME = int(rint(EPOCHREALTIME * 1000)) ))
	}
fi

diyship_precmd() {
	export DIYSHIP_STATUS=\$?
	export DIYSHIP_PIPESTATUS=\"\${pipestatus[@]}\"

	if (( \${+DIYSHIP_START_TIME} )); then
		__diyship_get_time && (( DIYSHIP_DURATION = DIYSHIP_CAPTURED_TIME - DIYSHIP_START_TIME )) && export DIYSHIP_DURATION=\"\$DIYSHIP_DURATION\"

		unset DIYSHIP_START_TIME
	else
		unset DIYSHIP_DURATION
	fi

	export DIYSHIP_JOBS=\${#jobstates}
}
diyship_preexec() {
	__diyship_get_time && DIYSHIP_START_TIME=\$DIYSHIP_CAPTURED_TIME
}

(( ! \${+precmd_functions} )) && precmd_functions=()
(( ! \${+preexec_functions} )) && preexec_functions=()

if [[ -z \${precmd_functions[(re)diyship_precmd]} ]]; then
	precmd_functions+=(diyship_precmd)
fi
if [[ -z \${preexec_functions[(re)diyship_preexec]} ]]; then
	preexec_functions+=(diyship_preexec)
fi

diyship_zle-keymap-select() {
	zle reset-prompt
}

__diyship_preserved_zle_keymap_select=\${widgets[zle-keymap-select]#user:}
if [[ -z \$__diyship_preserved_zle_keymap_select ]]; then
	zle -N zle-keymap-select diyship_zle-keymap-select;
else
	diyship_zle-keymap-select-wrapped() {
		\$__diyship_preserved_zle_keymap_select \"\$@\";
		diyship_zle-keymap-select \"\$@\";
	}
	zle -N zle-keymap-select diyship_zle-keymap-select-wrapped;
fi

__diyship_get_time && DIYSHIP_START_TIME=\$DIYSHIP_CAPTURED_TIME

export DIYSHIP_SHELL=\"zsh\"

VIRTUAL_ENV_DISABLE_PROMPT=1

setopt promptsubst
PROMPT='\$($DIYSHIP_COMMAND_LEFT)'
RPROMPT='\$($DIYSHIP_COMMAND_RIGHT)'
"

FISH_INIT="
function fish_prompt
	set -gx DIYSHIP_STATUS \$status
	set -gx DIYSHIP_PIPESTATUS \$pipestatus
	set -gx DIYSHIP_DURATION \"\$CMD_DURATION\$cmd_duration\"
	set -gx DIYSHIP_JOBS (count (jobs -p))

	switch \"\$fish_key_bindings\"
		case fish_hybrid_key_bindings fish_vi_key_bindings
			set -gx DIYSHIP_KEYMAP \"\$fish_bind_mode\"
		case '*'
			set -gx DIYSHIP_KEYMAP insert
	end

	$DIYSHIP_COMMAND_LEFT
end

function fish_right_prompt
	$DIYSHIP_COMMAND_RIGHT
end

set -g VIRTUAL_ENV_DISABLE_PROMPT 1

builtin functions -e fish_mode_prompt

set -gx DIYSHIP_SHELL \"fish\"
"

POWERSHELL_INIT="
#!/usr/bin/env pwsh

function global:prompt {

	function Invoke-Native {
		param(\$Executable, \$Arguments)
		\$startInfo = [System.Diagnostics.ProcessStartInfo]::new(\$Executable);
		\$startInfo.StandardOutputEncoding = [System.Text.Encoding]::UTF8;
		\$startInfo.RedirectStandardOutput = \$true;
		\$startInfo.RedirectStandardError = \$true;
		\$startInfo.CreateNoWindow = \$true;
		\$startInfo.UseShellExecute = \$false;
		if (\$startInfo.ArgumentList.Add) {
			foreach (\$arg in \$Arguments) {
				\$startInfo.ArgumentList.Add(\$arg);
			}
		}
		else {
			\$escaped = \$Arguments | ForEach-Object {
				\$s = \$_ -Replace '(\\+)\"','\$1\$1\"';
				\$s = \$s -Replace '(\\+)\$','\$1\$1';
				\$s = \$s -Replace '\"','\\\"';
				\"\`\"\$s\`\"\"
			}
			\$startInfo.Arguments = \$escaped -Join ' ';
		}
		\$process = [System.Diagnostics.Process]::Start(\$startInfo)

		\$stderr = \$process.StandardError.ReadToEnd().Trim()
		if (\$stderr -ne '') {
			\$host.ui.WriteErrorLine(\$stderr)
		}

		\$process.StandardOutput.ReadToEnd();
	}

	\$origDollarQuestion = \$global:?
	\$origLastExitCode = \$global:LASTEXITCODE

	\$ENV:DIYSHIP_JOBS = @(Get-Job | Where-Object { \$_.State -eq 'Running' }).Count

	\$ENV:DIYSHIP_STATUS = 0
	if (\$lastCmd = Get-History -Count 1) {
		if (-not \$origDollarQuestion) {
			\$lastCmdletError = try { \$error[0] |  Where-Object { \$_ -ne \$null } | Select-Object -ExpandProperty InvocationInfo } catch { \$null }
			\$ENV:DIYSHIP_STATUS = if (\$null -ne \$lastCmdletError -and \$lastCmd.CommandLine -eq \$lastCmdletError.Line) { 1 } else { \$origLastExitCode }
		}
		\$ENV:DIYSHIP_DURATION = [math]::Round((\$lastCmd.EndExecutionTime - \$lastCmd.StartExecutionTime).TotalMilliseconds)
	}

	Invoke-Native -Executable '$DIYSHIP_COMMAND_LEFT'

	\$global:LASTEXITCODE = \$origLastExitCode

	if (\$global:? -ne \$origDollarQuestion) {
		if (\$origDollarQuestion) {
			1+1
		} else {
			Write-Error '' -ErrorAction 'Ignore'
		}
	}

}

\$ENV:VIRTUAL_ENV_DISABLE_PROMPT = 1

\$ENV:DIYSHIP_SHELL = \"powershell\"
"

ION_INIT="
fn PROMPT
	export DIYSHIP_STATUS = \$?
	export DIYSHIP_DURATION = \$or(\$CMD_DURATION \$ION_CMD_DURATION)
	export DIYSHIP_DURATION = \$((DIYSHIP_DURATION * 1000))
	export DIYSHIP_JOBS = \$(jobs ^| wc -l)

	$DIYSHIP_COMMAND_LEFT
end

export DIYSHIP_SHELL=\"ion\"
"

ELVISH_INIT="
set-env DIYSHIP_SHELL \"elvish\"

# Define Hooks
local:cmd-start-time = 0
local:cmd-end-time = 0
local:cmd-duration = 0

fn diyship-after-readline-hook [line]{
	cmd-start-time = (date +%s%N)
}

fn diyship-before-readline-hook {
	cmd-end-time = (date +%s%N)
	cmd-duration = (- \$cmd-end-time \$cmd-start-time)
}

edit:after-readline = [ \$@edit:after-readline \$diyship-after-readline-hook~ ]
edit:before-readline = [ \$@edit:before-readline \$diyship-before-readline-hook~ ]

edit:prompt = {
	set-env DIYSHIP_DURATION \$cmd-duration
	set-env DIYSHIP_JOBS \$num-bg-jobs

	$DIYSHIP_COMMAND_LEFT
}

edit:rprompt = {
	set-env DIYSHIP_DURATION \$cmd-duration
	set-env DIYSHIP_JOBS \$num-bg-jobs

	$DIYSHIP_COMMAND_RIGHT
}"

TCSH_INIT="
setenv DIYSHIP_SHELL tcsh;

set USER_PRECMD = \"\`alias precmd\`\";
set USER_POSTCMD = \"\`alias postcmd\`\";

set DIYSHIP_PRECMD = 'set DIYSHIP_STATUS = \$status;set DIYSHIP_PATH = \"$DIYSHIP_COMMAND_LEFT\";set DIYSHIP_END_TIME = \`date +%s%N\`;set DIYSHIP_DURATION = 0;if ( \$DIYSHIP_START_TIME != -1 ) @ DIYSHIP_DURATION = \$DIYSHIP_END_TIME - \$DIYSHIP_START_TIME;set prompt = \"\`\$DIYSHIP_COMMAND_LEFT\`\";set DIYSHIP_START_TIME = -1';
set DIYSHIP_POSTCMD = 'set DIYSHIP_START_TIME = \`date +%s%N\`';

alias precmd \"\$DIYSHIP_PRECMD;\$USER_PRECMD\";
alias postcmd \"\$DIYSHIP_POSTCMD;\$USER_POSTCMD\";

set DIYSHIP_START_TIME = \`date +%s%N\`;
"

NUSHELL_INIT="
let-env DIYSHIP_SHELL = \"nushell\"

def diyship_prompt [] {
	let-env DIYSHIP_DURATION = \$nu.env.CMD_DURATION_MS

	^$DIYSHIP_COMMAND_LEFT
}
"

XONSH_INIT="
def diyship_prompt():
	last_cmd = __xonsh__.history[-1] if __xonsh__.history else None

	\$DIYSHIP_STATUS = last_cmd.rtn if last_cmd else 0
	\$DIYSHIP_DURATION = round((last_cmd.ts[1] - last_cmd.ts[0]) * 1000) if last_cmd else 0
	\$DIYSHIP_JOBS = sum(1 for job in __xonsh__.all_jobs.values() if job['obj'] and job['obj'].poll() is None)

	return \$($DIYSHIP_COMMAND_LEFT | cat)

\$PROMPT = diyship_prompt

\$DIYSHIP_SHELL = \"xonsh\"
"

# Start
case "$1" in
	'bash')       printf '%s'       "$BASH_INIT" ;;
	'zsh')        printf '%s'        "$ZSH_INIT" ;;
	'fish')       printf '%s'       "$FISH_INIT" ;;
	'powershell') printf '%s' "$POWERSHELL_INIT" ;;
	'ion')        printf '%s'        "$ION_INIT" ;;
	'elvish')     printf '%s'     "$ELVISH_INIT" ;;
	'tcsh')       printf '%s'       "$TCSH_INIT" ;;
	'nushell')    printf '%s'    "$NUSHELL_INIT" ;;
	'xonsh')      printf '%s'      "$XONSH_INIT" ;;
	*)
		printf '%s\n' "diyship: invalid shell -- '$SUBCOMMAND'" >&2

		exit 1
	;;
esac


exit 0
